#include<stdio.h>

int main()
{
      int i, limit, total = 0, x, counter = 0, time_quantum,j;

	  int waiting_time = 0, turnaround_time = 0,position,z,p[10],prio[10], arrival_time[10], burst_time[10], temporary[10],b;

	  float average_waiting_time, average_turnaround_time;

	  printf("\nEnter Total Number of Processes:");

	  scanf("%d", &limit);

	  x = limit;
      for(i = 0; i < limit; i++)
      {
	    p[i]=i+1;

	    prio[i]=0;
            printf("\nEnter total Details of Process[%d]\n", i + 1);
            printf("Arrival Time:\t");
            scanf("%d", &arrival_time[i]);
            printf("Burst Time:\t");
            scanf("%d", &burst_time[i]);
            temporary[i] = burst_time[i];
      }

      printf("\nEnter the Time Quantum:");
      scanf("%d", &time_quantum);
      printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\t Priority\n");
      for(total = 0, i = 0; x != 0;)
      {

		    for(z=0;z<limit;z++)
		    {
			int temporary1;
			position=z;
			for(j=z+1;j<limit;j++)
			{
			    if(prio[j]<prio[position])
				position=j;
			}

		temporary1=prio[z];

		prio[z]=prio[position];

		prio[position]=temporary1;

			temporary1=burst_time[z];
			burst_time[z]=burst_time[position];
			burst_time[position]=temporary1;
		 			temporary1=arrival_time[z];
				arrival_time[z]=arrival_time[position];
			arrival_time[position]=temporary1;

			temporary1=p[z];
				p[z]=p[position];
			p[position]=temporary1;

			temporary1=temporary[z];
				temporary[z]=temporary[position];
			temporary[position]=temporary1;
		    }
		{
		}

			if(temporary[i] <= time_quantum && temporary[i] > 0)
            {
                  total = total + temporary[i];
                  temporary[i] = 0;
                  counter = 1;
            }

			else if(temporary[i] > 0)
            {
                  temporary[i] = temporary[i] - time_quantum;
                  total = total + time_quantum;
            }

	for(b=0;b<limit;b++)
		{
			if(b==i)
			prio[b]+=1;
			else
			prio[b]+=2;
		}

            if(temporary[i] == 0 && counter == 1)
            {
                  x--;
                  printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d\t\t\t%d", p[i], burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i],prio[i]);
                  waiting_time = waiting_time + total - arrival_time[i] - burst_time[i];
                  turnaround_time = turnaround_time + total - arrival_time[i];
                  counter = 0;
            }
            if(i == limit - 1)
            {
                  i = 0;

			}
            else if(arrival_time[i + 1] <= total)
            {
                  i++;

			}
            else
            {
                  i = 0;

			}
      }
      return 0;
}
